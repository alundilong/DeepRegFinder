# Data for Genome Processing.
genome: hg38
window_width: 100
number_of_windows: 20

# genome_size_file provides chromosome names and their sizes as a TAB-delimited text file. 
# It can be used to select a subset of chromosomes. If not specified, the program
# will use all chromosomes in valid_chromosomes.
# Selecting a subset of the chromosomes allows you to quickly test out the whole pipeline.
genome_size_file: 'example_dat/genome/hg38.chr1.txt'
# the chromosome names that are "valid". this serves to remove those scaffold or undetermined
# chromosomes.
valid_chromosomes: ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 
                    'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13',
                    'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 
                    'chr21', 'chr22', 'chrX', 'chrY', 'chrM']

# Path to tss file for clustering (1bp TSS).
tss_file: 'example_dat/genome/gencode_v32_tss.bed'
distal_bp_distance : 1000 # use to slop TSSs.

# Enhancer data
enhancer_distal_bp_distance: 2000 # enhancers must be this distance away from TSS.
                                  # it is also used to keep background windows away from 
                                  # regulatory elements.
H3K4me3_file: 'example_dat/peak_lists/h1-h3k4me3-peaks.bed'

# Path to DHS (or any other DNA accessibility) file
DHS_file: 'example_dat/peak_lists/h1-dnase-seq-peaks.bed'

# Path to enhancer peak files. You can use more than one peak lists, such as 
# both p300 and CBP to define enhancers.
enhancer_files:
 - 'example_dat/peak_lists/h1-p300-narrowpeaks.bed'

# Transcription factor binding site files
# These shall be the peak lists for the TFs that you believe to be enhancer
# related. In H1 stem cells, Nanog, Oct4 and Sox2 are the master regulators
# that are considered to regulate enhancers.
# If there are no TFBS files, just comment the following lines.
TFBS:
 - 'example_dat/tfbs/nanog.bed'
 - 'example_dat/tfbs/oct4.bed'

# Path to data with the sense and antisense GRO-seq bam file.
# When you don't have strand-specific GRO-seq, comment the following two
# lines and use "groseq_bam_file".
sense_bam_file : 'example_dat/groseq/h1-groseq-sense.bam'
antisense_bam_file : 'example_dat/groseq/h1-groseq-antisense.bam'
# groseq_bam_file: None  # for non-strand-specific GRO-seq.
groseq_log_transformation: True #Whether you want to log transform the reads

# Path to the folder that has bam files for histone marks.
# Should be of format:
# histones/
#     histone1/
#         histone1_chipseqassay_rep1.bam
#         histone1_chipseqassay_rep2.bam
#     histone2/
#         histone2_chipseqassay_rep1.bam
#         histone2_chipseqassay_rep2.bam
# Note: histone files must be of format xxx_repN.bam where N represents the rep number
#       Even when you have only one replicate, name it as xxx_rep1.bam.
#       To preprocess the prediction dataset, make sure you use the same set of 
#       histone marks as that of training data
histone_folder : 'example_dat/histones'
generate_prediction_data: False # Set to True if preprocessing prediction data
histone_log_transformation: False #Whether you want to log transform the reads

# Model training related parameters.
bkg_samples: 100000 # #bkg-samples.
nz_cutoff: 5 # #nonzero bins in a region; this cutoff is used to discard 
             # regions with low information content, mostly background regions.
val_p: 0.2 # validation set proportion.
test_p: 0.2 # test set proportion.

# Performance related parameters.
cpu_threads: 6








